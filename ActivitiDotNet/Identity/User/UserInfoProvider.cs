using System.Collections.Generic;

using ActivitiDotNet.Abstract;
using ActivitiDotNet.Constants;
using ActivitiDotNet.CustomModel;
using ActivitiDotNet.Helpers;
using ActivitiDotNet.Model;
using ActivitiDotNet.Network;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace ActivitiDotNet.User
{
    /// <summary>
    /// Contains all methods necessary for manipulation of User class.
    /// </summary>
    public class UserInfoProvider : BaseInfoProvider<UserInfo>, IReadable<UserInfo>, IWriteable<UserInfo>, IRemoveable<UserInfo>
    {
        public UserInfoProvider() : base(UrlConstants.USER)
        {

        }

        public UserInfoProvider(string url) : base(url) { }

        /// <summary>
        /// Creates new user. When user is created, Id is auto generated by Activiti.
        /// </summary>
        /// <param name="value"><seealso cref="UserInfo"/> object.</param>
        /// <exception cref="WebException"></exception>
        public new void Create(ref UserInfo value)
        {
            base.Create(ref value);
        }

        /// <summary>
        /// Get existing user.
        /// </summary>
        /// <param name="id">Id of the user.</param>
        /// <returns><seealso cref="User"/> object.</returns>
        public new UserInfo Get(string id)
        {
            return base.Get(id);
        }

        /// <summary>
        /// Get list of all existing users.
        /// </summary>
        /// <returns><see cref="List{UserInfo}"/> object.</returns>
        public new List<UserInfo> GetAll()
        {
            return base.GetAll();
        }

        /// <summary>
        /// Updates existing user.
        /// </summary>
        /// <param name="id">Id of the existing user.</param>
        /// <param name="value"><seealso cref="UserInfo"/> object with properties that need to be updated..</param>
        /// <returns>Updated <seealso cref="UserInfo"/></returns>
        public new UserInfo Update(string id, UserInfo value)
        {
            return base.Update(id, value);
        }

        /// <summary>
        /// Delete existing user
        /// </summary>
        /// <param name="id">Id of user.</param>
        /// <returns></returns>
        public new UserInfo Delete(string id)
        {
            return base.Delete(id);
        }

        /// <summary>
        /// Tries to delete user if user exists. 
        /// </summary>
        /// <param name="id">Id of the user.</param>
        /// <param name="value">Deleted user.</param>
        /// <returns>Indicator if user is deleted.</returns>
        public new bool TryDelete(string id, out UserInfo value)
        {
            return base.TryDelete(id, out value);
        }

        /// <summary>
        /// Get user picture as <seealso cref="byte[]"/>
        /// </summary>
        /// <param name="userId">Id of the user.</param>
        /// <returns>User picture as <seealso cref="byte[]"/></returns>
        public byte[] GetUserPicture(string userId)
        {
            string url = string.Format("{0}/{1}/picture", UrlConstants.USER, userId);

            return BaseInfoProvider<ByteInfo>.GetBytes(url, "kermit", "kermit");
        }

        /// <summary>
        /// Update picture of existing user.
        /// </summary>
        /// <param name="userId">Id of the user.</param>
        /// <param name="pictureData">Picture data.</param>
        /// <param name="fileName">Name of the picture.</param>
        /// <param name="mimeType">Extension of the picture.</param>
        public void UpdateUserPicutre(string userId, byte[] pictureData, string fileName, string mimeType = "image/jpeg")
        {
            string url = string.Format("{0}/{1}/picture", UrlConstants.USER, userId);

            BaseInfoProvider<byte[]>.PostFile(url, pictureData, fileName, mimeType, "kermit", "kermit");
        }

        /// <summary>
        /// Get the list of the user informations.
        /// </summary>
        /// <param name="userId">Id of the user.</param>
        /// <returns><seealso cref="List{List{UserInfo}}"/> object.</returns>
        public List<UserInformations> GetUserInformations(string userId)
        {
            string url = UrlBuilder.BuildUrl(UrlConstants.USER, userId, "info");

            return BaseInfoProvider<List<UserInformations>>.ExecuteOperation(url, HttpMethod.GET, "kermit", "kermit");
        }

        /// <summary>
        /// Get single user information.
        /// </summary>
        /// <param name="userId">Id of the user.</param>
        /// <param name="informationKey">Key of the user information.</param>
        /// <returns><seealso cref="UserInformations"/> object</returns>
        public UserInformations GetUserInformation(string userId, string informationKey)
        {
            string url = UrlBuilder.BuildUrl(UrlConstants.USER, userId, "info", informationKey);

            return BaseInfoProvider<UserInformations>.ExecuteOperation(url, HttpMethod.GET, "kermit", "kermit");
        }

        /// <summary>
        /// Update existing user information on existing user.
        /// </summary>
        /// <param name="userId">Id of the user.</param>
        /// <param name="userInformationKey">Key of the information.</param>
        /// <param name="userInformationValue">New value of the information.</param>
        /// <returns>Updated <seealso cref="UserInformations"> object.</seealso></returns>
        public UserInformations UpdateUserInformation(string userId, string userInformationKey, string userInformationValue)
        {
            string url = UrlBuilder.BuildUrl(UrlConstants.USER, userId, "info", userInformationKey);

            JObject json = new JObject();
            json.Add("value", userInformationValue);

            return BaseInfoProvider<UserInformations>.ExecuteOperation(url, HttpMethod.PUT, "kermit", "kermit", body: json.ToString());
        }

        /// <summary>
        /// Create new user information for existing user.
        /// </summary>
        /// <param name="userId">Id of the user.</param>
        /// <param name="userInformation">Value of the user information.</param>
        /// <returns>Created user informtaion.</returns>
        public UserInformations CreateUserInformation(string userId, UserInformations userInformation)
        {
            string url = UrlBuilder.BuildUrl(UrlConstants.USER, userId, "info");

            return BaseInfoProvider<UserInformations>.ExecuteOperation(url, HttpMethod.POST, "kermit", "kermit", body: JsonConvert.SerializeObject(userInformation));
        }

        /// <summary>
        /// Delete existing information on existing user.
        /// </summary>
        /// <param name="userId">Id of the user.</param>
        /// <param name="userInformationKey">Key of the information.</param>
        /// <returns>Deleted <seealso cref="UserInformations"/> object.</returns>
        public UserInformations DeleteUserInformation(string userId, string userInformationKey)
        {
            string url = UrlBuilder.BuildUrl(UrlConstants.USER, userId, "info", userInformationKey);

            return BaseInfoProvider<UserInformations>.ExecuteOperation(url, HttpMethod.DELETE, "kermit", "kermit");
        }
    }
}
